tune_hyperparameters: true    # true: tune hyperparameters, false: use base models with default parameters
tuning_method: 'optuna'       # optuna | grid | none: use stored hyperparameters
n_trials: 20                  # number of trials for tuning

tuning_params:
  # pd parameters
  pd:
    ab:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 500
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.1
      param_grid:
        n_estimators: [ 50, 100, 250 ]
        learning_rate: [ 0.01, 0.1 ]
    ann:
      param_space:
        num_hidden_layers:
          type: 'int'
          low: 1
          high: 3
        hidden_layer_size:
          type: 'int'
          low: 32
          high: 512
        dropout_rate:
          type: 'float'
          low: 0.0
          high: 0.6
        epochs:
          type: 'int'
          low: 25
          high: 100
        batch_size:
          type: 'categorical'
          values: [ 32, 64, 128, 256, 512 ]
        learning_rate:
          type: 'float'
          low: 0.00001
          high: 0.01
          log: true
        weight_decay:
          type: 'float'
          low: 0.000001
          high: 0.01
          log: true
      param_grid:
        num_hidden_layers: [ 1, 2, 3 ]
        hidden_layer_size: [ 32, 64 ]
        activation: [ 'relu' ]
        dropout_rate: [ 0.0, 0.5 ]
        epochs: [ 100]
        batch_size: [ 128, 256 ]
        learning_rate: [ 0.0001, 0.001, 0.01 ]
        weight_decay: [ 0.00001, 0.0001, 0.001 ]
        early_stopping_delay: [ 10, 15 ]
    bnb:
      param_space:
        alpha:
          type: 'float'
          low: 0.01
          high: 1.0
          log: true
      param_grid:
        alpha: [ 0.1, 0.5 ]
    cb:
      param_space:
        iterations:
          type: 'int'
          low: 100
          high: 500
        depth:
          type: 'int'
          low: 3
          high: 12
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        l2_leaf_reg:
          type: 'float'
          low: 1.0
          high: 10.0
          log: true
        border_count:
          type: 'int'
          low: 32
          high: 255
        bagging_temperature:
          type: 'float'
          low: 0.0
          high: 1.0
        random_strength:
          type: 'float'
          low: 0.0
          high: 2.0
      param_grid:
        iterations: [ 100, 300, 500 ]
        depth: [ 4, 6, 8, 10 ]
        learning_rate: [ 0.01, 0.1, 0.2 ]
        l2_leaf_reg: [ 1, 3, 5, 10 ]
        border_count: [ 64, 128, 255 ]
    dt:
      param_space:
        criterion:
          type: 'categorical'
          values: [ 'gini', 'entropy' ]
        max_depth:
          type: 'int'
          low: 3
          high: 30
        min_samples_split:
          type: 'int'
          low: 2
          high: 20
        min_samples_leaf:
          type: 'int'
          low: 1
          high: 20
        ccp_alpha:
          type: 'float'
          low: 0.0
          high: 0.1
      param_grid:
        criterion: [ 'gini', 'entropy' ]
        max_depth: [ 3, 5, 10, 15, None ]
        min_samples_split: [ 2, 5, 10 ]
        min_samples_leaf: [ 1, 2, 4 ]
        ccp_alpha: [ 0, 1]
    gnb:
      param_space:
        var_smoothing:
          type: 'float'
          low: 0.00001
          high: 0.1
          log: true
      param_grid:
        var_smoothing: [ 0.0001, 0.001 ]
    knn:
      param_space:
        n_neighbors:
          type: 'int'
          low: 1
          high: 30
        weights:
          type: 'categorical'
          values: [ 'uniform', 'distance' ]
        metric:
          type: 'categorical'
          values: [ 'euclidean', 'manhattan', 'minkowski' ]
        p:
          type: 'int'
          low: 1
          high: 3
      param_grid:
        n_neighbors: [ 3, 5, 7, 11, 15 ]
        weights: [ 'uniform', 'distance' ]
        metric: [ 'euclidean', 'manhattan' ]
    lgbm:
      param_space:
        n_estimators:
          type: 'int'
          low: 100
          high: 500
        max_depth:
          type: 'int'
          low: -1
          high: 15
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        subsample:
          type: 'float'
          low: 0.6
          high: 1.0
        colsample_bytree:
          type: 'float'
          low: 0.6
          high: 1.0
        reg_alpha:
          type: 'float'
          low: 0.0001
          high: 10.0
          log: true
        reg_lambda:
          type: 'float'
          low: 0.0001
          high: 10.0
          log: true
        min_child_samples:
          type: 'int'
          low: 10
          high: 100
        num_leaves:
          type: 'int'
          low: 20
          high: 300
      param_grid:
        n_estimators: [ 100, 300, 500 ]
        max_depth: [ 3, 6, 10 ]
        learning_rate: [ 0.01, 0.1, 0.2 ]
        subsample: [ 0.8, 0.9, 1.0 ]
        colsample_bytree: [ 0.8, 0.9, 1.0 ]
        reg_alpha: [ 0.001, 0.1, 1.0 ]
        reg_lambda: [ 0.001, 0.1, 1.0 ]
        num_leaves: [ 31, 50, 100 ]
    lr:
      param_space:
        C:
          type: 'float'
          low: 0.0001
          high: 100
          log: true
        penalty:
          type: 'categorical'
          values: [ 'l1', 'l2']
      param_grid:
        C: [ 0.001, 0.01, 0.1, 1.0, 10.0, 100.0 ]
        penalty: [ 'l1', 'l2' ]
    rf:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 500
        max_depth:
          type: 'int'
          low: 5
          high: 25
        min_samples_split:
          type: 'int'
          low: 2
          high: 10
        min_samples_leaf:
          type: 'int'
          low: 1
          high: 10
        max_features:
          type: 'categorical'
          values: [ 'sqrt', 'log2']
      param_grid:
        n_estimators: [ 50. 100, 250, 500 ]
        max_depth: [ 5, 25]
        max_features: [ "sqrt", "log2"]
    svm:
      param_space:
        C:
          type: 'float'
          low: 0.001
          high: 10
          log: true
      param_grid:
        C: [ 0.01, 0.1, 1, 10 ]
    xgb:
      param_space:
        n_estimators:
          type: 'int'
          low: 100
          high: 500
        max_depth:
          type: 'int'
          low: 3
          high: 10
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        subsample:
          type: 'float'
          low: 0.6
          high: 1.0
        colsample_bytree:
          type: 'float'
          low: 0.6
          high: 1.0
        reg_alpha:
          type: 'float'
          low: 0.001
          high: 10.0
          log: true
        reg_lambda:
          type: 'float'
          low: 1.0
          high: 10.0
          log: true
        min_child_weight:
          type: 'int'
          low: 1
          high: 10
        gamma:
          type: 'float'
          low: 0.0
          high: 5.0
      param_grid:
        n_estimators: [ 100, 300, 500 ]
        max_depth: [ 3, 6, 10 ]
        learning_rate: [ 0.01, 0.1, 0.2 ]
        subsample: [ 0.8, 0.9, 1.0 ]
        colsample_bytree: [ 0.8, 0.9, 1.0 ]
        reg_alpha: [ 0.0, 0.1, 1.0 ]
        reg_lambda: [ 1.0, 5.0, 10.0 ]
    tabnet:
      param_space:
        n_d:
          type: 'int'
          low: 8
          high: 128
        n_a:
          type: 'int'
          low: 8
          high: 128
        n_steps:
          type: 'int'
          low: 3
          high: 10
        n_shared:
          type: 'int'
          low: 1
          high: 5
        gamma:
          type: 'float'
          low: 1.0
          high: 2.0
        lambda_sparse:
          type: 'float'
          low: 0.000001
          high: 0.001
          log: true
      param_grid:
        n_d: [ 8, 16, 32, 64 ]
        n_a: [ 8, 16, 32 ]
        n_steps: [ 3, 5, 7 ]
        n_shared: [ 1, 2, 3 ]
        gamma: [ 1.0, 1.3, 1.5 ]
        lambda_sparse: [ 0.000001, 0.0001, 0.001 ]
    tabpfn:
    tabpfn_rf:
    tabpfn_auto:
    tabpfn_hpo:

  # lgd parameters
  lgd:
    ab:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 500
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.1
      param_grid:
        n_estimators: [ 50, 100, 250 ]
        learning_rate: [ 0.01, 0.1 ]
    ann:
      param_space:
        num_hidden_layers:
          type: 'int'
          low: 1
          high: 3
        hidden_layer_size:
          type: 'int'
          low: 16
          high: 256
        dropout_rate:
          type: 'float'
          low: 0.0
          high: 0.6
        epochs:
          type: 'int'
          low: 30
          high: 150
        batch_size:
          type: 'categorical'
          values: [ 64, 128, 256, 512 ]
        learning_rate:
          type: 'float'
          low: 0.00001
          high: 0.01
          log: true
        weight_decay:
          type: 'float'
          low: 0.000001
          high: 0.01
          log: true
      param_grid:
        num_hidden_layers: [ 1, 2 ]
        hidden_layer_size: [ 32,64 ]
        activation: [ 'relu' ]
        dropout_rate: [ 0,0.5 ]
        epochs: [ 50 ]
        batch_size: [ 256 ]
        learning_rate: [ 0.001 ]
        weight_decay: [ 0.01 ]
        early_stopping_delay: [ 5 ]
    cb:
      param_space:
        iterations:
          type: 'int'
          low: 10
          high: 500
        depth:
          type: 'int'
          low: 3
          high: 10
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        l2_leaf_reg:
          type: 'float'
          low: 1.0
          high: 10.0
      verbose: [false]
      param_grid:
        iterations: [ 50, 100, 250]
        depth: [ 4, 6, 10 ]
        learning_rate: [ 0.01, 0.1 ]
        verbose: [ False ]
    dt:
      param_space:
        criterion:
          type: 'categorical'
          values: [ 'squared_error', 'absolute_error', 'friedman_mse' ]
        max_depth:
          type: 'int'
          low: 3
          high: 20
      param_grid:
        criterion: [ 'squared_error', 'absolute_error', 'friedman_mse' ]
        max_depth: [ 3, 10, 20 ]
    en:
      param_space:
        alpha:
          type: 'float'
          low: 0.0001
          high: 100
          log: true
        l1_ratio:
          type: 'float'
          low: 0.0
          high: 1.0
      param_grid:
        alpha: [ 0.1, 0.5 ]
        l1_ratio: [ 0.1, 0.5 ]
    gb:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 200
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
      param_grid:
        n_estimators: [ 50, 100 ]
        learning_rate: [ 0.01, 0.1 ]
    knn:
      param_space:
        n_neighbors:
          type: 'int'
          low: 3
          high: 30
      weights:
        type: 'categorical'
        values: [ 'uniform', 'distance' ]
      p:
        type: 'int'
        low: 1
        high: 2
      param_grid:
        n_neighbors: [ 3, 5 ]
    lgbm:
      param_space:
        n_estimators:
          type: 'int'
          low: 100
          high: 500
        num_leaves:
          type: 'int'
          low: 25
          high: 150
        max_depth:
          type: 'int'
          low: -1
          high: 20
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        subsample:
          type: 'float'
          low: 0.6
          high: 1.0
        colsample_bytree:
          type: 'float'
          low: 0.6
          high: 1.0
      param_grid:
        n_estimators: [ 50, 100, 250 ]
        max_depth: [ 3, 6, 10 ]
        learning_rate: [ 0.01, 0.1 ]
    lr:
      param_space:
        fit_intercept:
          type: 'categorical'
          values: [ true, false ]
      param_grid:
        fit_intercept: [ True, False ] # to provide at least one hyperpara
    rf:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 500
        max_depth:
          type: 'int'
          low: 3
          high: 25
        min_samples_split:
          type: 'int'
          low: 2
          high: 20
        min_samples_leaf:
          type: 'int'
          low: 1
          high: 10
        max_features:
          type: 'categorical'
          values: [ 'sqrt', 'log2' ]
      param_grid:
        n_estimators: [ 100, 200, 300 ]
        max_depth: [ None, 50 ]
        max_features: [ "sqrt", "log2" ]
    svr:
      param_space:
        C:
          type: 'float'
          low: 0.01
          high: 10.0
          log: true
        gamma:
          type: 'float'
          low: 0.0001
          high: 0.1
          log: true
        epsilon:
          type: 'float'
          low: 0.001
          high: 1.0
          log: true
      param_grid:
        C: [ 0.1, 1 ]
        epsilon: [ 0.01, 0.01 ]
        gamma: [ 0.01, 0.01 ]
    xgb:
      param_space:
        n_estimators:
          type: 'int'
          low: 50
          high: 500
        max_depth:
          type: 'int'
          low: 3
          high: 12
        learning_rate:
          type: 'float'
          low: 0.01
          high: 0.3
          log: true
        subsample:
          type: 'float'
          low: 0.6
          high: 1.0
        colsample_bytree:
          type: 'float'
          low: 0.6
          high: 1.0
      param_grid:
        n_estimators: [ 50, 100 ]
        max_depth: [ 3, 6, 10 ]
        learning_rate: [ 0.01, 0.1 ]
    tabnet:
      param_space:
        n_d:
          type: 'int'
          low: 8
          high: 64
        n_steps:
          type: 'int'
          low: 3
          high: 10
        n_shared:
          type: 'int'
          low: 1
          high: 5
      param_grid:
        scheduler_params: [ { "step_size": 10, "gamma": 0.9 },
                            { "step_size": 20, "gamma": 0.9 } ]
        n_d: [ 8, 16 ]
        n_shared: [ 1,2,3 ]
        n_steps: [ 3,6,9 ]
    tabpfn:
    tabpfn_rf: